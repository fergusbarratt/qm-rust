extern crate nalgebra;

use nalgebra as na;

#[derive(Debug, Clone)]
struct HilbertSpace {
    basis: Vec<PureState>,
    dim: usize,
}

#[derive(Debug, Clone)]
struct PureState {
    at: Vec<f64>,
    space: HilbertSpace,
    dim: usize,
}

#[derive(Debug, Clone)]
struct MixedState {
    at: na::DMatrix<f64>,
    space: Vec<HilbertSpace>,
    dim: (usize, usize),
}

impl HilbertSpace {
    fn new(dim: usize) -> HilbertSpace {
        HilbertSpace {
            basis: HilbertSpace::canonical_basis(dim)
                       .iter()
                       .map(|x| PureState::new(x))
                       .collect::<Vec<PureState>>(),
            dim: dim,
        }
    }

    fn partition(&self, partition: Vec<usize>) -> Vec<HilbertSpace> {
        if partition.iter().fold(0, |ac, x| ac + x) != self.dim {
            panic!("Not a valid partition");
        } else {
            let mut ret = vec![];
            for dim in partition {
                ret.push(HilbertSpace::new(dim));
            }
            ret
        }
    }

    fn canonical_basis(dim: usize) -> Vec<Vec<f64>> {
        let mut ret_1: Vec<Vec<f64>> = vec![];
        let mut ret_2: Vec<f64> = vec![];
        for i in 1..dim {
            for j in 1..dim {
                if i == j {
                    ret_2.push(1.0);
                } else {
                    ret_2.push(0.0);
                }
            }
            ret_1.push(ret_2.clone());
            ret_2 = vec![];
        }
        ret_1
    }
}

impl PureState {
    fn new(at: &Vec<f64>) -> PureState {
        PureState {
            at: at.clone(),
            space: HilbertSpace::new(at.len()),
            dim: at.len(),
        }
    }
}

impl MixedState {
    fn new(at: &na::DMatrix<f64>) -> MixedState {
        MixedState {
            at: at.clone(),
            space: vec![HilbertSpace::new(at.nrows())],
            dim: (at.nrows(), at.ncols()),
        }
    }
    fn partition(&mut self, partition: Vec<usize>) -> () {
        if self.space.len() > 1 {
            panic!("Space already partitioned");
        }
        self.space = self.space[0].partition(partition);
    }
    fn unpartition(&mut self) -> () {
        if self.space.len() < 2 {
            panic!("Space not partitioned");
        }
        let dim = self.space.iter().fold(0, |acc, x| acc + x.dim);
        self.space = vec![HilbertSpace::new(dim)];
    }
}

impl na::Outer for PureState {
    type OuterProductType = MixedState;
    fn outer(&self, other: &Self) -> Self::OuterProductType {
        MixedState::new(&na::DMatrix::from_fn(self.at.len(),
                                              other.at.len(),
                                              |i, j| self.at[i] * other.at[j]))
    }
}

struct Channel {
    state: PureState,
    space: HilbertSpace,
}

fn main() {
    let x = HilbertSpace::new(5).partition(vec![2, 3]);
    println!("{:?}", x);
}

#[cfg(test)]
mod tests {
    use nalgebra as na;

    use super::{MixedState, PureState, HilbertSpace};

    #[test]
    fn outer_test() {
        let x = PureState::new(&vec![1.0, 2.0]);
        let y: MixedState = na::outer(&x, &x);
        assert_eq!(y.at,
                   na::DMatrix::from_row_iter(2, 2, vec![1.0, 2.0, 2.0, 4.0]));
    }

    #[test]
    fn canonical_test() {
        for vec in HilbertSpace::new(3).basis.iter() {
            assert_eq!(vec.at.len(), 2)
        }
    }

    #[test]
    fn partition_test() {
        let space = HilbertSpace::new(5);
        let partition = space.partition(vec![2, 3]);
        assert_eq!(partition[0].basis.len(), 1);
        assert_eq!(partition[1].basis.len(), 2);
    }

    #[test]
    fn mixed_state_new() {
        let mat = na::DMatrix::from_row_iter(2, 2, vec![1.0, 2.0, 3.0, 4.0]);
        let state = MixedState::new(&mat);
        assert_eq!(state.at, mat);
        assert_eq!(state.dim, (state.at.nrows(), state.at.ncols()));
    }

    #[test]
    fn mixed_state_partition() {
        let mat = na::DMatrix::from_row_iter(3, 3, vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]);
        let state = MixedState::new(&mat);
        state.partition(vec![2, 3]);
        assert_eq!(, 1);
        assert_eq!(, 2);
    }
}
